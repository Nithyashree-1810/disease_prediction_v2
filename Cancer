from os import XATTR_REPLACE
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.impute import SimpleImputer
cancerdata=pd.read_csv('/content/data set.csv')
cancerdata.head()
cancerdata.shape
cancerdata.describe()
from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
cancerdata['diagnosis'] = encoder.fit_transform(cancerdata['diagnosis'])
cancerdata['diagnosis'].unique()
cancerdata['diagnosis'].value_counts()
cancerdata.groupby('diagnosis').mean()
X = cancerdata.drop(columns = 'diagnosis', axis=1)
Y = cancerdata['diagnosis']
imputer = SimpleImputer(strategy='mean')
X = imputer.fit_transform(X)
scaler = StandardScaler()
scaler.fit(X)
standardized_data = scaler.transform(X)
X = standardized_data
Y = cancerdata['diagnosis']
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)
classifier = svm.SVC(kernel='linear')
classifier.fit(X_train, Y_train)
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy score of the training data : ', training_data_accuracy)
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy score of the test data : ', test_data_accuracy)
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy score of the training data : ', training_data_accuracy)
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy score of the test data : ', test_data_accuracy)
input_data=(17.99,10.38,122.8,1001,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,1.095,0.9053,8.589,153.4,0.006399,0.04904,0.05373,0.01587,0.03003,0.006193,25.38,17.33,184.6,2019,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
std_data = scaler.transform(input_data_reshaped)
print(classifier.predict(std_data))
if (classifier.predict(std_data) == 0):
  print('The Breast cancer is Malignant')
else:
  print('The Breast Cancer is Benign')
import pickle
filename = 'cancer_model.sav'
pickle.dump(classifier, open(filename, 'wb'))
loaded_model = pickle.load(open('cancer_model.sav', 'rb'))




